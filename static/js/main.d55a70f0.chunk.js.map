{"version":3,"sources":["axios.js","Row.js","Requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","console","log","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","class","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d55a70f0.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n/**base url to make to the movie to the db */\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n});\r\n\r\n\r\n\r\n//https://api.themoviesdb.org/3/foo-bar\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport instance from './axios';\r\nimport \"./Row.css\";\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from \"movie-trailer\";\r\n/*title destructuring inside component*/\r\nconst base_url=\"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl,isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl,setTrailerUrl]=useState(\"\");\r\n    useEffect(() => {\r\n        //if [], run once when the row loads and dont run again\r\n        async function fetchData() {\r\n            //console.log(\"helo\", fetchUrl)\r\n            const request = await instance.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n           // console.warn(\"request\",request);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[fetchUrl]);\r\n    //console.log(\"movies\",movies);\r\n    const opts={\r\n        height:\"390px\",\r\n        width:\"100%\",\r\n        playerVars:{\r\n            //https://developers.google.com\r\n            autoplay:1,\r\n        },\r\n    };\r\n    const handleClick=(movie)=>{\r\n        console.log(\"movie\", movie);\r\n        if (trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        } else{\r\n            movieTrailer(movie?.name ||movie?.title|| \"\")\r\n            .then((url)=>{\r\n                console.log(\"url\",url)\r\n        //https://www.youtube.com/watch?v=XtMThy80Kql\r\n        const urlParams = new URLSearchParams(new URL(url).search);\r\n        setTrailerUrl(urlParams.get(\"v\"));\r\n        //console.log(\"urlparam=>\",urlParams.get(\"v\"));\r\n        })\r\n.catch((error)=>console.log(\"lala\",error))\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n               \r\n                {movies.map((movie) => (\r\n                    <img \r\n                    key={movie.id}\r\n                    onClick={()=>handleClick(movie)}\r\n                    className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                    src={`${base_url}${isLargeRow ? movie.poster_path:movie.backdrop_path }`} \r\n                    alt={movie.name} />\r\n                ))}\r\n            </div>\r\n        {trailerUrl && <Youtube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY=\"7f5a6889f96c519a8d31651709138e07\";\r\n\r\nconst requests={\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&languages=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\nexport default requests;\r\n\r\n","import React,{useEffect,useState} from 'react'\r\nimport instance from \"./axios\";\r\nimport requests from \"./Requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n    const [movie,setMovie]= useState([]);\r\n    useEffect(()=>{\r\n        // if i put nothing inside useEffect array [] then it loads every time when Banner loads\r\n        \r\n        async function fetchData(){\r\n            const request = await instance.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\nrequest.data.results[\r\n    Math.floor(Math.random()*request.data.results.length - 1)\r\n]\r\n            )\r\n            console.log();\r\n// >> Math.floor(Math.random()*request.data.results.length - 1)\r\n        } \r\n        fetchData();\r\n    },[]);\r\n    //console.log(\"moviee\",movie);\r\n    function truncate(str,n){\r\n        return str?.length > n ? str.substr(0,n-1)+\"...\":str;\r\n    }\r\n    return (\r\n        <header className=\"banner\"\r\n        style={{\r\n            backgroundSize:\"cover\",\r\n            backgroundImage:`url(\r\n        \"https://image.tmdb.org/t/p/original/${movie ?.backdrop_path }\"\r\n            )`\r\n        }}\r\n        >\r\n            <div className=\"banner_contents\">\r\n                <h1 class=\"banner_title\">\r\n    {movie?.title|| movie?.name||movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">\r\n                        Play\r\n                    </button>\r\n                    <button className=\"banner_button\">\r\n                        My List\r\n                    </button>\r\n                <h1 className=\"banner_description\">\r\n                    {truncate(movie?.overview,150)}\r\n                </h1>\r\n                </div>\r\n            </div>\r\n            <div className=\"banner-fadeBottom\"/>\r\n        </header>\r\n    )\r\n}\r\n//inside banner_contents if title is not found go for name if name not loads got for original_name\r\nexport default Banner;\r\n","import React,{useState,useEffect} from 'react';\r\nimport \"./Nav.css\";\r\nfunction Nav() {\r\n    const[show,handleShow]=useState(false);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY>100){\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n        return ()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    },[]);\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img\r\n        className=\"nav_logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n            />\r\n        \r\n        <img \r\n        className=\"nav_avatar\"\r\n        src=\"https://images.emojiterra.com/twitter/v13.0/512px/1f987.png\"\r\n        alt=\"Netflix Logo\"\r\n\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport './App.css';\nimport Row from \"./Row\";\nimport requests from \"./Requests\";\nimport Banner from \"./Banner\";\nimport Nav from \"./Nav\"\nimport Login from \"./Login\";\nimport Signup from './Signup';\n\nfunction App() {\n    // Initialize Firebase \n  return (<div className =\"app\">\n      <Nav/>\n      <Banner/>\n      <Row title=\"NETFLIX ORIGINALS\" \n      fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow={true}\n      />\n      <Row title=\"Trending\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}